@page "/utforsk-blogger"
@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService
@using BloggBlazorServer.Models
@using BloggBlazorServer.Services

<style>
    .container {
        padding: 20px;
        max-width: 800px;
        margin: auto;
    }

    .blogg-entry {
        background-color: #f9f9f9;
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 20px;
        border-radius: 10px;
        transition: box-shadow 0.3s;
    }

        .blogg-entry:hover {
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .blogg-entry h4 {
            color: #333;
            margin-top: 0;
        }

        .blogg-entry p {
            color: #666;
        }

        .blogg-entry button {
            background-color: #4CAF50;
            color: white;
            border: none;
            padding: 10px 20px;
            text-align: center;
            text-decoration: none;
            display: inline-block;
            font-size: 16px;
            margin: 4px 2px;
            cursor: pointer;
            border-radius: 5px;
            transition: background-color 0.3s;
        }

            .blogg-entry button:hover {
                background-color: #45a049;
            }
</style>

<h3>Utforsk Blogger</h3>

<div class="container">
    @if (blogger == null)
    {
        <p>Laster blogger...</p>
    }
    else
    {
        @foreach (var blogg in blogger)
        {
            <div class="blogg-entry" @onclick="() => GåTilBlogg(blogg.BloggId)">
                <h4>@blogg.Tittel</h4>
                <p>@blogg.Beskrivelse</p>

                @if (blogg.ErAbonnert)
                {
                    <button @onclick="() => AvsluttAbonnement(blogg.BloggId)">Avbryt abonnement</button>
                }
                else
                {
                    <button @onclick="() => AbonnerPåBlogg(blogg.BloggId)">Abonner</button>
                }
            </div>
        }
    }
</div>

@code {
    private List<Blogg> blogger;

    protected override async Task OnInitializedAsync()
    {
        var allBlogger = await httpClient.GetFromJsonAsync<List<Blogg>>("api/blogg");
        var userId = UserStateService.CurrentUserId;
    
        blogger = allBlogger.Where(b => b.EierId != userId).ToList();
    }

    private void GåTilBlogg(int bloggId)
    {
        NavigationManager.NavigateTo($"/blogg/{bloggId}");
    }


    private async Task AbonnerPåBlogg(int bloggId)
    {
        try
        {
            var userId = UserStateService.CurrentUserId;
            var response = await httpClient.PostAsync($"api/abonnement/{userId}/{bloggId}", null);

            if (response.IsSuccessStatusCode)
            {
                var blogg = blogger.FirstOrDefault(b => b.BloggId == bloggId);
                if (blogg != null)
                {
                    blogg.ErAbonnert = true;
                }

            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Feil ved oppretting av abonnement: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved oppretting av abonnement: {ex.Message}");
        }

        OppdaterAbonnementStatus(bloggId, true);

    }

    private void OppdaterAbonnementStatus(int bloggId, bool erAbonnert)
    {
        var blogg = blogger.FirstOrDefault(b => b.BloggId == bloggId);
        if (blogg != null)
        {
            blogg.ErAbonnert = erAbonnert;
            StateHasChanged();
        }
    }

    private async Task AvsluttAbonnement(int bloggId)
    {
        try
        {
            var userId = UserStateService.CurrentUserId;
            var response = await httpClient.DeleteAsync($"api/abonnement/{userId}/{bloggId}");

            if (response.IsSuccessStatusCode)
            {
                var blogg = blogger.FirstOrDefault(b => b.BloggId == bloggId);
                if (blogg != null)
                {
                    blogg.ErAbonnert = false;
                }

                blogger = blogger.Where(b => b.BloggId != bloggId).ToList();
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"Feil ved avslutning av abonnement: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Feil ved avslutning av abonnement: {ex.Message}");
        }
    }

}