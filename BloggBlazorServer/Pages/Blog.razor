@page "/min-blogg"
@using BloggBlazorServer.Services
@using Newtonsoft.Json
@inject HttpClient httpClient
@inject UserStateService UserStateService
@inject NavigationManager NavigationManager

<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        color: #333;
    }

    h3 {
        color: #333;
        text-align: center;
    }

    .post-container {
        border: 1px solid #ddd;
        padding: 15px;
        margin-bottom: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    .edit-form-container {
        background-color: white;
        padding: 20px;
        margin-bottom: 30px;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

        .edit-form-container div {
            margin-bottom: 15px;
        }

    .form-control, .btn {
        border-radius: 4px;
        padding: 10px;
    }

    .blog-title {
        color: #007bff;
        margin-top: 20px;
        font-weight: bold;
    }

    .blog-description {
        font-style: italic;
        margin-bottom: 20px;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
        cursor: pointer;
        padding: 8px 12px;
        font-size: 14px;
        border-radius: 4px;
    }

            

    .btn-danger {
        background-color: #dc3545;
        border-color: #dc3545;
        color: white;
        cursor: pointer;
    }

    .btn-primary:hover {
        background-color: #0056b3;
        border-color: #004085;
    }

    .btn-danger:hover {
        background-color: #c82333;
        border-color: #bd2130;
    }

    .alert {
        padding: 10px;
        margin-top: 20px;
        border-radius: 4px;
        color: white;
    }

    .post-info {
        margin-top: 10px;
        font-size: 0.9em;
        color: #666;
    }

    .text-success {
        color: #28a745;
    }

    .text-danger {
        color: #dc3545;
    }

    a {
        color: #007bff;
        text-decoration: none;
    }

        a:hover {
            text-decoration: underline;
        }

    .register-link {
        margin-top: 15px;
        text-align: center;
    }

        .register-link a {
            color: #007bff;
            text-decoration: none;
        }

            .register-link a:hover {
                text-decoration: underline;
            }
</style>


<div class="page-container">
    <h3>Min Blogg</h3>

    @if (isLoading)
    {
        <p>Laster blogginnhold...</p>
    }
    else if (UserStateService.IsLoggedIn)
    {
        <p>Velkommen til din blogg, @currentUser?.UserName!</p>

        @if (blog != null)
        {
            <a href="/editblog/@blog.BloggId">Rediger Blogg</a>
            <h4 class="blog-title">@blog.Tittel</h4>
            <p class="blog-description">@blog.Beskrivelse</p>

        <EditForm Model="@newPost" OnValidSubmit="HandleSubmit" class="edit-form-container">
    <div>
        <InputText id="title" class="form-control" @bind-Value="newPost.Tittel" placeholder="Tittel på innlegg" />
    </div>
    <div>
        <InputTextArea id="content" class="form-control" @bind-Value="newPost.Innhold" placeholder="Innhold i innlegget" />
    </div>
    <div>
        <button type="submit" class="btn btn-primary">Publiser Innlegg</button>
    </div>
</EditForm>





        @if (!string.IsNullOrEmpty(submissionMessage))
        {
            <p class="@submissionMessageClass">@submissionMessage</p>
        }


    }
    else
    {
        <p>Du har ikke opprettet en blogg ennå.</p>
    }

}
else
{
    <p>Du må være logget inn for å se din blogg.</p>
}

    @if (blog?.Posts?.Count > 0)
    {
        @foreach (var post in blog.Posts)
        {
            <div class="post-container" @onclick="() => GåTilPost(post.PostId)">
                <h5>@post.Tittel</h5>
                <p>@post.Innhold</p>
                <div>
                    <span>@post.AntallLikes Likes</span> | 
                    <span>@post.AntallKommentarer Kommentarer</span>
                </div>
                <button @onclick="() => DeletePost(post.PostId)" class="btn btn-danger">Slett</button>
            </div>
        }
    }


</div>

@code {
    private Blogg blog;
    private UserModel currentUser;
    private PostModel newPost = new PostModel();
    private bool isLoading = true;
    private string submissionMessage;
    private string submissionMessageClass;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        if (UserStateService.IsLoggedIn)
        {
            try
            {
                var userId = UserStateService.CurrentUserId;
                currentUser = await httpClient.GetFromJsonAsync<UserModel>($"api/auth/user/{userId}");
                var response = await httpClient.GetAsync($"https://localhost:7018/api/Blogg/user/{userId}");

                if (response.IsSuccessStatusCode)
                {
                    var content = await response.Content.ReadAsStringAsync();
                    blog = JsonConvert.DeserializeObject<Blogg>(content);
                }
                else
                {
                    Console.WriteLine("Feil ved henting av blogg: Responsen var ikke vellykket.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Feil ved henting av blogg: {ex.Message}");
            }
        }
        if (blog != null)
        {
            try
            {
                var postResponse = await httpClient.GetAsync($"api/Post/blog/{blog.BloggId}");
                if (postResponse.IsSuccessStatusCode)
                {
                    var postData = await postResponse.Content.ReadAsStringAsync();
                    blog.Posts = JsonConvert.DeserializeObject<List<PostModel>>(postData);
                }
                else
                {
                    Console.WriteLine("Feil ved henting av innlegg.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Feil ved henting av innlegg: {ex.Message}");
            }
        }

        await FetchPosts();
        isLoading = false;
    }

    private async Task HandleSubmit()
    {
        var postToCreate = new
        {
            Tittel = newPost.Tittel,
            Innhold = newPost.Innhold,
            BloggId = blog.BloggId,
        };

        var response = await httpClient.PostAsJsonAsync("api/Post", postToCreate);


        if (response.IsSuccessStatusCode)
        {
            submissionMessage = "Innlegget ble opprettet suksessfullt.";
            submissionMessageClass = "text-success";
            newPost = new PostModel();
            await FetchPosts();

        }
        else
        {
            var errorResponse = await response.Content.ReadAsStringAsync();
            submissionMessage = $"Det oppstod en feil under opprettelse av innlegget: {errorResponse}";
            submissionMessageClass = "text-danger";
        }

    }
    private async Task FetchPosts()
    {
        var postResponse = await httpClient.GetAsync($"api/Post/blog/{blog.BloggId}");
        if (postResponse.IsSuccessStatusCode)
        {
            var postData = await postResponse.Content.ReadAsStringAsync();
            blog.Posts = JsonConvert.DeserializeObject<List<PostModel>>(postData);
        }
 
    }

    private async Task DeletePost(int postId)
    {
        var response = await httpClient.DeleteAsync($"api/Post/{postId}");
        if (response.IsSuccessStatusCode)
        {
            NavigationManager.NavigateTo("/confirmation");
        }
        else
        {
        }
    }


    private void GåTilPost(int postId)
    {
        NavigationManager.NavigateTo($"/post/{postId}");
    }




    public class PostModel
    {
        public int PostId { get; set; }
        public string Tittel { get; set; }
        public string Innhold { get; set; }
        public DateTime Opprettet { get; set; }
        public string Tags { get; set; }
        public int AntallLikes { get; set; }    // Nytt felt for antall likerklikk
        public int AntallKommentarer { get; set; } // Nytt felt for antall kommentarer
    }



    public class Blogg
    {
        public int BloggId { get; set; }
        public string Tittel { get; set; }
        public string Beskrivelse { get; set; }
        public List<PostModel> Posts { get; set; }
    }

    public class UserModel
    {
        public string Id { get; set; }
        public string UserName { get; set; }
        public string Email { get; set; }
    }
}
