@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@inject UserStateService UserStateService

@page "/register"
@using System.Net.Http.Json
@using System.ComponentModel.DataAnnotations
@using BloggBlazorServer.Services

<style>
    .register-container {
        max-width: 300px;
        margin: 0 auto;
        padding: 20px;
        background-color: white;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    }

    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        color: #333;
    }

    h3 {
        color: #333;
        text-align: center;
    }

   
    .form-group {
        margin-bottom: 15px;
    }

        .form-group label {
            display: block;
            margin-bottom: 5px;
            font-weight: bold;
        }

    .form-control {
        width: 100%;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
        box-sizing: border-box;
    }

    .btn-primary {
        background-color: #007bff;
        border-color: #007bff;
        color: white;
        padding: 10px 15px;
        border-radius: 4px;
        cursor: pointer;
        font-size: 16px;
        width: 100%;
        box-sizing: border-box;
    }

        .btn-primary:hover {
            background-color: #0056b3;
            border-color: #004085;
        }

    .alert {
        padding: 10px;
        margin-top: 20px;
        border-radius: 4px;
        color: white;
    }

    .alert-danger {
        background-color: #dc3545;
    }

    .alert-success {
        background-color: #28a745;
    }



</style>

<h3>Registrer</h3>

<div class="register-container">
<EditForm Model="@userRegistrationModel" OnValidSubmit="@RegisterUser">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="username">Brukernavn</label>
        <InputText id="username" class="form-control" @bind-Value="userRegistrationModel.UserName" />
        <ValidationMessage For="@(() => userRegistrationModel.UserName)" />
    </div>

    <div class="form-group">
        <label for="email">E-post</label>
        <InputText id="email" class="form-control" @bind-Value="userRegistrationModel.Email" />
        <ValidationMessage For="@(() => userRegistrationModel.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Passord</label>
        <InputText id="password" class="form-control" @bind-Value="userRegistrationModel.Password" type="password"
                   title="Passordet må være minst 6 tegn, inneholde minst ett ikke-alfanumerisk tegn, ett siffer, og én stor bokstav." />
        <ValidationMessage For="@(() => userRegistrationModel.Password)" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Bekreft passord</label>
        <InputText id="confirmPassword" class="form-control" @bind-Value="userRegistrationModel.ConfirmPassword" type="password" />
        <ValidationMessage For="@(() => userRegistrationModel.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Registrer</button>
</EditForm>
</div>

@if (registrationResult != null)
{
    <div class="alert @registrationResultCssClass">@registrationResult</div>
}


@code {
    private UserRegistrationModel userRegistrationModel = new UserRegistrationModel();
    private string? registrationResult;
    private string registrationResultCssClass;

    private async Task RegisterUser()
    {
        var response = await httpClient.PostAsJsonAsync("api/auth/register", userRegistrationModel);
        if (response.IsSuccessStatusCode)
        {
            await LoginUser();
        }
        else
        {
            var responseContent = await response.Content.ReadAsStringAsync();
            registrationResult = $"Registration failed: {responseContent}";
            registrationResultCssClass = "alert-danger";
        }
    }

    private async Task LoginUser()
    {
        var loginModel = new UserLoginModel
        {
            Email = userRegistrationModel.Email,
            Password = userRegistrationModel.Password
        };

        var response = await httpClient.PostAsJsonAsync("api/auth/login", loginModel);
        if (response.IsSuccessStatusCode)
        {
            var loginResponse = await response.Content.ReadFromJsonAsync<Login.LoginResponse>();
            if (loginResponse != null)
            {
                UserStateService.Login(loginResponse.UserId, loginResponse.UserName, userRegistrationModel.Email);
                NavigationManager.NavigateTo("/");
            }
        }
        else
        {
            registrationResult = "Login failed after registration.";
            registrationResultCssClass = "alert-danger";
        }
    }

    public class UserLoginModel
    {
        public string Email { get; set; }
        public string Password { get; set; }
    }



    public class UserRegistrationModel
    {

        [Required(ErrorMessage = "Brukernavn påkrevd")]
        [StringLength(15, ErrorMessage = "Brukernavnet kan være maks 15 bokstaver")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Email påkrevd")]
        [EmailAddress(ErrorMessage = "Ugyldig email-addresse")]
        public string Email { get; set; }

        
        [Required(ErrorMessage = "Passord påkrevd")]
        [StringLength(100, ErrorMessage = "Passordet må være minst 6 tegn, inneholde minst ett ikke-alfanumerisk tegn, ett siffer, og én stor bokstav", MinimumLength = 6)]
        public string Password { get; set; }

        [Compare("Password", ErrorMessage = "Passordene matcher ikke")]
        public string ConfirmPassword { get; set; }
    }
}
